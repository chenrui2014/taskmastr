{"version":3,"sources":["reform.js","modules/to-_ap_.js","modules/to-_dd_.js","modules/to-_ddd_.js","modules/to-_mm_.js","modules/to-_mmm_.js","modules/to-ap.js","modules/to-date.js","modules/to-dd.js","modules/to-ddd.js","modules/to-hh.js","modules/to-hhh.js","modules/to-iso-short.js","modules/to-iso.js","modules/to-ml.js","modules/to-mll.js","modules/to-mm.js","modules/to-mmm.js","modules/to-string.js","modules/to-tt.js","modules/to-ttt.js","modules/to-unix.js","modules/to-utc-short.js","modules/to-utc.js","modules/to-yy.js","modules/to-yyyy.js","modules/to-zz.js"],"names":[],"mappings":"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","file":"reform.js","sourcesContent":["/**\n * Take a user-input date in any format and convert it to several formats\n * Also serves as a wrapper for common JS date methods like toUTCString and toISOString\n * toLocaleDateString is currently not well-supported especially on mobile\n * \n * Author: Patrick Fricano\n * \n * reform.format = 'string': string such as '9/12/2015', '12/9/2015', or '2015-9-12' with or without leading zeros\n * reform.format = 'iso': ISO string including time such as '2015-09-12T23:06:19Z'\n * reform.format = 'isoShort': ISO string without time such as '2015-09-12'\n * reform.format = 'utc': UTC string such as 'Sat, 12 Sep 2015 06:00:00 GMT'\n * reform.format = 'utcShort': UTC string without time such as 'Sat, 12 Sep 2015'\n * reform.format = 'unix': milliseconds since January 1, 1970\n * reform.inputClass: class name on the text input field to search for\n * reform.outputClass: class name on the text ouput field to search for\n * reform.options: if format === string, set order, delimiter and number of digits included\n */\n\nimport date from './modules/to-date';\nimport yyyy from './modules/to-yyyy';\nimport yy from './modules/to-yy';\nimport mmm from './modules/to-mmm';\nimport mm from './modules/to-mm';\nimport MMM from './modules/to-MMM';\nimport MM from './modules/to-MM';\nimport ddd from './modules/to-dd';\nimport dd from './modules/to-dd';\nimport DDD from './modules/to-DDD';\nimport DD from './modules/to-DD';\nimport hhh from './modules/to-hhh';\nimport hh from './modules/to-hh';\nimport ttt from './modules/to-ttt';\nimport tt from './modules/to-tt';\nimport ap from './modules/to-ap';\nimport AP from './modules/to-AP';\nimport mll from './modules/to-mll';\nimport ml from './modules/to-ml';\nimport zz from './modules/to-zz';\n//import string from 'to-string';\n//import iso from 'to-iso';\n//import isoShort from 'to-isoShort';\n//import utc from 'to-utc';\n//import utcShort from 'to-utcShort';\n//import unix from 'to-unix';\n\nlet reform = {\n\tsearch: [\n\t\t'yyyy', // four-digit year 2015\n\t\t'yy', // two-digit year (20)15\n\t\t'DDD', // full day of the week Sunday-Saturday\n\t\t'ddd', // two-digit date of the month 01-31\n\t\t'DD', // abbreviated day of the week Sun-Sat\n\t\t'dd', // date of the month with no leading zeros 1-31\n\t\t'MMM', // full month January-December\n\t\t'mmm', // two-digit month 00-12\n\t\t'MM', // abbreviated month Jan-Dec\n\t\t'mm', // month with no leading zeros 1-12\n\t\t'hhh', // two-digit hours 01-12\n\t\t'hh', // hour with no leading zeros 1-12\n\t\t'ttt', // two-digit minutes 00-59\n\t\t'tt', // minutes with no leading zeros 0-59\n\t\t'AP', // AM or PM\n\t\t'ap', // am or pm\n\t\t'mll', //milliseconds 000-999\n\t\t'ml', //milliseconds with no leading zeros 0-999\n\t\t'zz' // timezone offset UTC -6:00\n\t],\n\tto: {} // Where the conversion methods will go\n};\n\nreform.to.date = date;\nreform.to.yyyy = yyyy;\nreform.to.yy = yy;\nreform.to.mmm = mmm;\nreform.to.mm = mm;\nreform.to.MMM = MMM;\nreform.to.MM = MM;\nreform.to.ddd = ddd;\nreform.to.dd = dd;\nreform.to.DDD = DDD;\nreform.to.DD = DD;\nreform.to.hhh = hhh;\nreform.to.hh = hh;\nreform.to.ttt = ttt;\nreform.to.tt = tt;\nreform.to.ap = ap;\nreform.to.AP = AP;\nreform.to.mll = mll;\nreform.to.ml = ml;\nreform.to.zz = zz;\n//reform.to.string = string;\n//reform.to.iso = iso;\n//reform.to.isoShort = isoShort;\n//reform.to.utc = utc;\n//reform.to.utcShort = utcShort;\n//reform.to.unix = unix;\n\n/**\n * Convert the object passed to a date and test its validity\n * @param {Object} \tinput a string or date object (something that can be converted to a valid date)\n * @param {String} format a string indicating the output date format\n * @returns {Date}\tif string passes the test, return the date object\n */\nreform.to.string = (input, format) => {\n\tconst date = reform.to.date(input);\n\tlet converted = format;\n\tfor (let i of reform.search) {\n\t\tif (converted.indexOf(i) !== -1) {\n\t\t\t//console.log('Search string is: ' + i);\n\t\t\t//console.log('Converted string is: ' + reform.to[i](date));\n\t\t\tconst replacer = reform.to[i](date).toString();\n\t\t\tconverted = converted.replace(i, replacer);\n\t\t\t//console.log(converted);\n\t\t}\n\t}\n\treturn converted;\n}\n\nreform.to.iso = (string) => {\n\tconst date = reform.to.date(string);\n\n\treturn date.toISOString();\n}\n\t\nreform.to.isoShort =  (string) => {\n\tconst date = reform.to.date(string);\n\treturn date.toISOString().split('T')[0];\n}\n\nreform.to.unix = (string) => {\n\tconst date = reform.to.date(string);\n\n\treturn Date.parse(date);\n}\n\nreform.to.utc = (string) => {\n\tconst date = reform.to.date(string);\n\n\treturn date.toUTCString();\n}\n\nreform.to.utcShort = (string) => {\n\tconst date = reform.to.date(string);\n\n\tconst arr = date.toUTCString().split(' ');\n\tlet newArr = [];\n\n\tconsole.log(arr);\n\tfor (var i = 0; i < 4; i++) {\n\t\tnewArr.push(arr[i]);\n\t}\n\n\treturn newArr.join(' ');\n}\n\nexport default reform;","export default function (date) {\n\tlet hour = date.getHours();\n\tlet ampm = (hour < 12) ? 'AM' : 'PM';\n\treturn ampm;\n}","/**\n * Convert the object passed to a date and test its validity\n * @param {Date} \ta date object\n * @returns {Number}\tthe abbreviated day of the week\n */\nexport default function (date) {\n\tconst days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\tlet dayOfWeek = date.getDay();\n\treturn days[dayOfWeek];\n}","/**\n * Convert the object passed to a date and test its validity\n * @param {Date} \ta date object\n * @returns {String} the full day of the week\n */\nexport default function (date) {\n\tconst days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\tlet dayOfWeek = date.getDay();\n\treturn days[dayOfWeek];\n}","/**\n * Convert the object passed to a date and test its validity\n * @param {Date} \ta date object\n * @returns {String}\tthe abbreviated month\n */\nexport default function (date) {\n\tconst months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov',  'Dec']\n\tlet month = date.getMonth().toString();\n\treturn months[month];\n}","/**\n * Convert the object passed to a date and test its validity\n * @param {Date} \ta date object\n * @returns {String}\tthe full month\n */\nexport default  function (date) {\n\tconst months = ['January', 'February', 'March', 'April', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\tlet month = date.getMonth().toString();\n\treturn months[month];\n}","export default function (date) {\n\tlet hour = date.getHours();\n\tlet ampm = (hour < 12) ? 'am' : 'pm';\n\treturn ampm;\n}","/**\n * Convert the object passed to a date and test its validity\n * @param {Object} \tobj any object\n * @returns {Date}\tif string passes the test, return the date object\n */\nexport default function (obj) {\n\tconsole.log(obj);\n\tif (obj == null) throw new TypeError('This is null or undefined');\n\tobj = new Date(obj);\n\tif (Object.prototype.toString.call(obj) === \"[object Date]\") {\n\t\tif (isNaN(obj.getTime())) {\n\t\t\tthrow new TypeError('This is not a valid date');\n\t\t}\n\t}\n\treturn obj;\n}","/**\n * Convert the object passed to a date and test its validity\n * @param {Date} \ta date object\n * @returns {Number}\tthe date of the month with no leading zeros\n */\nexport default function (date) {\n\tlet day = date.getDate().toString();\n\treturn day;\n}","/**\n * Convert the object passed to a date and test its validity\n * @param {Date} \ta date object\n * @returns {Number}\tthe two-digit date of the month\n */\nexport default function (date) {\n\tlet day = date.getDate().toString();\n\treturn (day.length < 2) ? '0' + day : day;\n}","export default function (date) {\n\tlet hour = date.getHours();\n\tif (hour === 0) hour = 12;\n\tif (hour < 13) hour = hour;\n\tif (hour >= 13) hour = hour - 12;\n\treturn hour;\n}","export default function (date) {\n\tlet hour = date.getHours();\n\tif (hour === 0) hour = 12;\n\tif (hour < 13) hour = hour;\n\tif (hour >= 13) hour = hour - 12;\n\thour = hour.toString();\n\treturn (hour.length < 2) ? '0' + hour : hour;\n}","/**\n * Converts a date object to an ISO string without the time\n * @param   {Date}   date a date object\n * @returns {String} ISO String without time (just the date)\n */\nimport reform from '../reform'; \n\nexport default function (string) {\n\tconst date = reform.to.date(string);\n\treturn date.toISOString().split('T')[0];\n}","/**\n * Converts a date object to an ISO string\n * @param   {Date}   date a date object\n * @returns {String} ISO String including time\n */\nimport reform from '../reform'; \n\nexport default function (string) {\n\tconst date = reform.to.date(string);\n\n\treturn date.toISOString();\n}","export default function (date) {\n\tlet milliseconds = date.getMilliseconds().toString();\n\treturn milliseconds;\n}","export default function (date) {\n\tlet milliseconds = date.getMilliseconds().toString();\n\tswitch (milliseconds.length) {\n\t\tcase 1:\n\t\t\tmilliseconds = '00' + milliseconds;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tmilliseconds = '0' + milliseconds;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tmilliseconds = milliseconds;\n\t\t\tbreak;\n\t}\n\treturn milliseconds;\n}","/**\n * Convert the object passed to a date and test its validity\n * @param {Date} \ta date object\n * @returns {Number}\tthe month with no leading zeros\n */\nexport default function (date) {\n\tlet month = (date.getMonth() + 1).toString();\n\treturn month;\n}","/**\n * Convert the object passed to a date and test its validity\n * @param {Date} \ta date object\n * @returns {Number}\tthe two-digit month\n */\nexport default function (date) {\n\tlet month = (date.getMonth() + 1).toString();\n\treturn (month.length < 2) ? '0' + month : month;\n}","/**\n * Convert the object passed to a date and test its validity\n * @param {Object} \tinput a string or date object (something that can be converted to a valid date)\n * @param {String} format a string indicating the output date format\n * @returns {Date}\tif string passes the test, return the date object\n */\nimport reform from '../reform'; \n\nexport default function (input, format) {\n\tconst date = reform.to.date(input);\n\tlet converted = format;\n\tfor (let i of reform.search) {\n\t\tif (converted.indexOf(i) !== -1) {\n\t\t\t//console.log('Search string is: ' + i);\n\t\t\t//console.log('Converted string is: ' + reform.to[i](date));\n\t\t\tconst replacer = reform.to[i](date).toString();\n\t\t\tconverted = converted.replace(i, replacer);\n\t\t\t//console.log(converted);\n\t\t}\n\t}\n\treturn converted;\n}","export default function (date) {\n\tlet minute = date.getMinutes().toString();\n\treturn minute;\n}","export default function (date) {\n\tlet minute = date.getMinutes().toString();\n\treturn (minute.length < 2) ? '0' + minute : minute;\n}","/**\n * Converts a date object to UNIX time (milliseconds from January 1, 1970)\n * @param   {Date}   date a date object\n * @returns {Number} milliseconds from January1, 1970\n */\nimport reform from '../reform'; \n\nexport default function (string) {\n\tconst date = reform.to.date(string);\n\n\treturn Date.parse(date);\n}","\n/**\n * Converts a date object to a UTC string without the time\n * @param   {Date}   date a date object\n * @returns {String} UTC string without time (just the date)\n */\nimport reform from '../reform'; \n\nexport default function (string) {\n\tconst date = reform.to.date(string);\n\n\tconst arr = date.toUTCString().split(' ');\n\tlet newArr = [];\n\n\tconsole.log(arr);\n\tfor (var i = 0; i < 4; i++) {\n\t\tnewArr.push(arr[i]);\n\t}\n\n\treturn newArr.join(' ');\n\n}","/**\n * Converts a date object to a UTC string\n * @param   {Date}   date a date object\n * @returns {String} UTC string including time\n */\nimport reform from '../reform'; \n\nexport default function (string) {\n\tconst date = reform.to.date(string);\n\n\treturn date.toUTCString();\n}","/**\n * Convert the object passed to a date and test its validity\n * @param {Date} \ta date object\n * @returns {Number}\tthe two-digit year\n */\nexport default function (date) {\n\treturn date.getFullYear().toString().substr(2);\n}","/**\n * Convert the object passed to a date and test its validity\n * @param {Date} \ta date object\n * @returns {Number}\tthe four-digit year\n */\nexport default function (date) {\n\treturn date.getFullYear();\n}","export default function (date) {\n\tlet offset = date.getTimezoneOffset() / 60 * -1;\n\treturn 'UTC ' + offset + ':00';\n}"],"sourceRoot":"/source/"}