{"version":3,"sources":["reform.min.js","reform.js"],"names":["_interopRequireDefault","obj","__esModule","default","Object","defineProperty","exports","value","_modulesToDate","require","_modulesToDate2","_modulesToYyyy","_modulesToYyyy2","_modulesToYy","_modulesToYy2","_modulesToMmm","_modulesToMmm2","_modulesToMm","_modulesToMm2","_modulesToMMM","_modulesToMMM2","_modulesToMM","_modulesToMM2","_modulesToDd","_modulesToDd2","_modulesToDd3","_modulesToDDD","_modulesToDDD2","_modulesToDD","_modulesToDD2","_modulesToHhh","_modulesToHhh2","_modulesToHh","_modulesToHh2","_modulesToTtt","_modulesToTtt2","_modulesToTt","_modulesToTt2","_modulesToAp","_modulesToAp2","_modulesToAP","_modulesToAP2","_modulesToMll","_modulesToMll2","_modulesToMl","_modulesToMl2","_modulesToZz","_modulesToZz2","reform","search","to","date","yyyy","yy","mmm","mm","MMM","MM","ddd","dd","DDD","DD","hhh","hh","ttt","tt","ap","AP","mll","ml","zz","string","input","format","converted","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","i","indexOf","replacer","toString","replace","err","iso","toISOString","isoShort","split","unix","Date","parse","utc","toUTCString","utcShort","arr","newArr","console","log","push","join","module"],"mappings":"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","file":"reform.min.js","sourcesContent":[null,"/**\n * Take a user-input date in any format and convert it to several formats\n * Also serves as a wrapper for common JS date methods like toUTCString and toISOString\n * toLocaleDateString is currently not well-supported especially on mobile\n * \n * Author: Patrick Fricano\n * \n * reform.format = 'string': string such as '9/12/2015', '12/9/2015', or '2015-9-12' with or without leading zeros\n * reform.format = 'iso': ISO string including time such as '2015-09-12T23:06:19Z'\n * reform.format = 'isoShort': ISO string without time such as '2015-09-12'\n * reform.format = 'utc': UTC string such as 'Sat, 12 Sep 2015 06:00:00 GMT'\n * reform.format = 'utcShort': UTC string without time such as 'Sat, 12 Sep 2015'\n * reform.format = 'unix': milliseconds since January 1, 1970\n * reform.inputClass: class name on the text input field to search for\n * reform.outputClass: class name on the text ouput field to search for\n * reform.options: if format === string, set order, delimiter and number of digits included\n */\n\nimport date from './modules/to-date';\nimport yyyy from './modules/to-yyyy';\nimport yy from './modules/to-yy';\nimport mmm from './modules/to-mmm';\nimport mm from './modules/to-mm';\nimport MMM from './modules/to-MMM';\nimport MM from './modules/to-MM';\nimport ddd from './modules/to-dd';\nimport dd from './modules/to-dd';\nimport DDD from './modules/to-DDD';\nimport DD from './modules/to-DD';\nimport hhh from './modules/to-hhh';\nimport hh from './modules/to-hh';\nimport ttt from './modules/to-ttt';\nimport tt from './modules/to-tt';\nimport ap from './modules/to-ap';\nimport AP from './modules/to-AP';\nimport mll from './modules/to-mll';\nimport ml from './modules/to-ml';\nimport zz from './modules/to-zz';\n//import string from 'to-string';\n//import iso from 'to-iso';\n//import isoShort from 'to-isoShort';\n//import utc from 'to-utc';\n//import utcShort from 'to-utcShort';\n//import unix from 'to-unix';\n\nlet reform = {\n\tsearch: [\n\t\t'yyyy', // four-digit year 2015\n\t\t'yy', // two-digit year (20)15\n\t\t'DDD', // full day of the week Sunday-Saturday\n\t\t'ddd', // two-digit date of the month 01-31\n\t\t'DD', // abbreviated day of the week Sun-Sat\n\t\t'dd', // date of the month with no leading zeros 1-31\n\t\t'MMM', // full month January-December\n\t\t'mmm', // two-digit month 00-12\n\t\t'MM', // abbreviated month Jan-Dec\n\t\t'mm', // month with no leading zeros 1-12\n\t\t'hhh', // two-digit hours 01-12\n\t\t'hh', // hour with no leading zeros 1-12\n\t\t'ttt', // two-digit minutes 00-59\n\t\t'tt', // minutes with no leading zeros 0-59\n\t\t'AP', // AM or PM\n\t\t'ap', // am or pm\n\t\t'mll', //milliseconds 000-999\n\t\t'ml', //milliseconds with no leading zeros 0-999\n\t\t'zz' // timezone offset UTC -6:00\n\t],\n\tto: {} // Where the conversion methods will go\n};\n\nreform.to.date = date;\nreform.to.yyyy = yyyy;\nreform.to.yy = yy;\nreform.to.mmm = mmm;\nreform.to.mm = mm;\nreform.to.MMM = MMM;\nreform.to.MM = MM;\nreform.to.ddd = ddd;\nreform.to.dd = dd;\nreform.to.DDD = DDD;\nreform.to.DD = DD;\nreform.to.hhh = hhh;\nreform.to.hh = hh;\nreform.to.ttt = ttt;\nreform.to.tt = tt;\nreform.to.ap = ap;\nreform.to.AP = AP;\nreform.to.mll = mll;\nreform.to.ml = ml;\nreform.to.zz = zz;\n//reform.to.string = string;\n//reform.to.iso = iso;\n//reform.to.isoShort = isoShort;\n//reform.to.utc = utc;\n//reform.to.utcShort = utcShort;\n//reform.to.unix = unix;\n\n/**\n * Convert the object passed to a date and test its validity\n * @param {Object} \tinput a string or date object (something that can be converted to a valid date)\n * @param {String} format a string indicating the output date format\n * @returns {Date}\tif string passes the test, return the date object\n */\nreform.to.string = (input, format) => {\n\tconst date = reform.to.date(input);\n\tlet converted = format;\n\tfor (let i of reform.search) {\n\t\tif (converted.indexOf(i) !== -1) {\n\t\t\t//console.log('Search string is: ' + i);\n\t\t\t//console.log('Converted string is: ' + reform.to[i](date));\n\t\t\tconst replacer = reform.to[i](date).toString();\n\t\t\tconverted = converted.replace(i, replacer);\n\t\t\t//console.log(converted);\n\t\t}\n\t}\n\treturn converted;\n}\n\nreform.to.iso = (string) => {\n\tconst date = reform.to.date(string);\n\n\treturn date.toISOString();\n}\n\t\nreform.to.isoShort =  (string) => {\n\tconst date = reform.to.date(string);\n\treturn date.toISOString().split('T')[0];\n}\n\nreform.to.unix = (string) => {\n\tconst date = reform.to.date(string);\n\n\treturn Date.parse(date);\n}\n\nreform.to.utc = (string) => {\n\tconst date = reform.to.date(string);\n\n\treturn date.toUTCString();\n}\n\nreform.to.utcShort = (string) => {\n\tconst date = reform.to.date(string);\n\n\tconst arr = date.toUTCString().split(' ');\n\tlet newArr = [];\n\n\tconsole.log(arr);\n\tfor (var i = 0; i < 4; i++) {\n\t\tnewArr.push(arr[i]);\n\t}\n\n\treturn newArr.join(' ');\n}\n\nexport default reform;"],"sourceRoot":"/source/"}